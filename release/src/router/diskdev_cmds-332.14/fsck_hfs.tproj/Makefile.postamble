###############################################################################
#  Makefile.postamble
#  Copyright 1997, Apple Computer, Inc.
#
#  Use this makefile, which is imported after all other makefiles, to
#  override attributes for a project's Makefile environment. This allows you  
#  to take advantage of the environment set up by the other Makefiles. 
#  You can also define custom rules at the end of this file.
#
###############################################################################
# 
# These variables are exported by the standard makefiles and can be 
# used in any customizations you make.  They are *outputs* of
# the Makefiles and should be used, not set.
# 
#  PRODUCTS: products to install.  All of these products will be placed in
#	 the directory $(DSTROOT)$(INSTALLDIR)
#  GLOBAL_RESOURCE_DIR: The directory to which resources are copied.
#  LOCAL_RESOURCE_DIR: The directory to which localized resources are copied.
#  OFILE_DIR: Directory into which .o object files are generated.
#  DERIVED_SRC_DIR: Directory used for all other derived files
#
#  ALL_CFLAGS:  flags to pass when compiling .c files
#  ALL_MFLAGS:  flags to pass when compiling .m files
#  ALL_CCFLAGS:  flags to pass when compiling .cc, .cxx, and .C files
#  ALL_MMFLAGS:  flags to pass when compiling .mm, .mxx, and .M files
#  ALL_PRECOMPFLAGS:  flags to pass when precompiling .h files
#  ALL_LDFLAGS:  flags to pass when linking object files
#  ALL_LIBTOOL_FLAGS:  flags to pass when libtooling object files
#  ALL_PSWFLAGS:  flags to pass when processing .psw and .pswm (pswrap) files
#  ALL_RPCFLAGS:  flags to pass when processing .rpc (rpcgen) files
#  ALL_YFLAGS:  flags to pass when processing .y (yacc) files
#  ALL_LFLAGS:  flags to pass when processing .l (lex) files
#
#  NAME: name of application, bundle, subproject, palette, etc.
#  LANGUAGES: langages in which the project is written (default "English")
#  English_RESOURCES: localized resources (e.g. nib's, images) of project
#  GLOBAL_RESOURCES: non-localized resources of project
#
#  SRCROOT:  base directory in which to place the new source files
#  SRCPATH:  relative path from SRCROOT to present subdirectory
#
#  INSTALLDIR: Directory the product will be installed into by 'install' target
#  PUBLIC_HDR_INSTALLDIR: where to install public headers.  Don't forget
#        to prefix this with DSTROOT when you use it.
#  PRIVATE_HDR_INSTALLDIR: where to install private headers.  Don't forget
#	 to prefix this with DSTROOT when you use it.
#
#  EXECUTABLE_EXT: Executable extension for the platform (i.e. .exe on Windows)
#
###############################################################################

# Some compiler flags can be overridden here for certain build situations.
#
#    WARNING_CFLAGS:  flag used to set warning level (defaults to -Wmost)
#    DEBUG_SYMBOLS_CFLAGS:  debug-symbol flag passed to all builds (defaults
#	to -g)
#    DEBUG_BUILD_CFLAGS:  flags passed during debug builds (defaults to -DDEBUG)
#    OPTIMIZE_BUILD_CFLAGS:  flags passed during optimized builds (defaults
#	to -O)
#    PROFILE_BUILD_CFLAGS:  flags passed during profile builds (defaults
#	to -pg -DPROFILE)
#    LOCAL_DIR_INCLUDE_DIRECTIVE:  flag used to add current directory to
#	the include path (defaults to -I.)
#    DEBUG_BUILD_LDFLAGS, OPTIMIZE_BUILD_LDFLAGS, PROFILE_BUILD_LDFLAGS: flags
#	passed to ld/libtool (defaults to nothing)


# Library and Framework projects only:
#    INSTALL_NAME_DIRECTIVE:  This directive ensures that executables linked
#	against the framework will run against the correct version even if
#	the current version of the framework changes.  You may override this
#	to "" as an alternative to using the DYLD_LIBRARY_PATH during your
#	development cycle, but be sure to restore it before installing.


# Ownership and permissions of files installed by 'install' target

#INSTALL_AS_USER = root
        # User/group ownership 
#INSTALL_AS_GROUP = wheel
        # (probably want to set both of these) 
#INSTALL_PERMISSIONS =
        # If set, 'install' chmod's executable to this


# Options to strip.  Note: -S strips debugging symbols (executables can be stripped
# down further with -x or, if they load no bundles, with no options at all).

#STRIPFLAGS = -S


#########################################################################
# Put rules to extend the behavior of the standard Makefiles here.  Include them in
# the dependency tree via cvariables like AFTER_INSTALL in the Makefile.preamble.
#
# You should avoid redefining things like "install" or "app", as they are
# owned by the top-level Makefile API and no context has been set up for where 
# derived files should go.
#
# 3246229 - use of sed adds a newline character (0x0a) to the end of the file so
# we added the tr -d command to remove the newline character.  this is OK since
# we used tr to change all newlines to carriage returns just before sed.

HFS_INSTALLDIR = $(SYSTEM_LIBRARY_DIR)/Filesystems/hfs.fs
FSCK_STRINGPATH = $(HFS_INSTALLDIR)/Contents/Resources/English.lproj/fsck.strings

after_install:
	install -m 755 -o root -g wheel -d $(DSTROOT)/usr/share/man/man8
	install -m 644 -o root -g wheel -c fsck_hfs.8 $(DSTROOT)/usr/share/man/man8
	mkdir -p $(DSTROOT)$(HFS_INSTALLDIR)/Contents/Resources/English.lproj
	echo -n "AB" | tr A \\376 | tr B \\377 > $(DSTROOT)$(FSCK_STRINGPATH)
	awk -f makestrings strings.c | tr \\012 \\015 | sed 's/./~&/g' | tr -d \\012 | tr \\015 \\012 | tr \\176 \\000 >> $(DSTROOT)$(FSCK_STRINGPATH)
	chown -Rf root:wheel $(DSTROOT)$(HFS_INSTALLDIR)/Contents
	find $(DSTROOT)$(HFS_INSTALLDIR)/Contents -type d -exec chmod 755 {} \;
	find $(DSTROOT)$(HFS_INSTALLDIR)/Contents -type f -exec chmod 644 {} \;
