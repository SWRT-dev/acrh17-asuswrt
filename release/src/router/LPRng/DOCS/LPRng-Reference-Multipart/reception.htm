<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org">
    <title>Job Reception</title>
    <meta name="GENERATOR" content=
    "Modular DocBook HTML Stylesheet Version 1.7">
    <link rel="HOME" title=" LPRng Reference Manual" href=
    "index.htm">
    <link rel="UP" title="Job Processing" href="jobsteps.htm">
    <link rel="PREVIOUS" title=
    "Submitting Jobs and Service Requests" href="submitting.htm">
    <link rel="NEXT" title="Spool Queue Processing " href=
    "spoolq.htm">
  </head>

  <body class="SECT1" bgcolor="#FFFFFF" text="#000000" link=
  "#0000FF" vlink="#840084" alink="#0000FF">
    <div class="NAVHEADER">
      <table summary="Header navigation table" width="100%" border=
      "0" cellpadding="0" cellspacing="0">
        <tr>
          <th colspan="3" align="center">LPRng Reference Manual: 5
          Sep 2003 (For LPRng-3.8.22)</th>
        </tr>

        <tr>
          <td width="10%" align="left" valign="bottom"><a href=
          "submitting.htm" accesskey="P">Prev</a></td>

          <td width="80%" align="center" valign="bottom">Chapter
          15. Job Processing</td>

          <td width="10%" align="right" valign="bottom"><a href=
          "spoolq.htm" accesskey="N">Next</a></td>
        </tr>
      </table>
      <hr align="LEFT" width="100%">
    </div>

    <div class="SECT1">
      <h1 class="SECT1"><a name="RECEPTION">15.3. Job
      Reception</a></h1>

      <ul>
        <li>
          <p><var class="LITERAL">longnumber</var> FLAG <span
          class="emphasis"><i class="EMPHASIS">Long job number (6
          digits)</i></span></p>
        </li>

        <li>
          <p><var class="LITERAL">fifo</var> FLAG <span class=
          "emphasis"><i class="EMPHASIS">enforce FIFO order for
          reception</i></span></p>
        </li>

        <li>
          <p><var class="LITERAL">lpd_listen_port=</var><span
          class="emphasis"><i class="EMPHASIS"><b class=
          "APPLICATION">lpd</b> will listen on this
          port</i></span></p>
        </li>

        <li>
          <p><var class=
          "LITERAL">incoming_control_filter=</var><span class=
          "emphasis"><i class="EMPHASIS">filter to modify incoming
          job control file</i></span></p>
        </li>

        <li>
          <p><var class=
          "LITERAL">translate_incoming_format=</var><span class=
          "emphasis"><i class="EMPHASIS">change data file
          formats</i></span></p>
        </li>

        <li>
          <p><var class="LITERAL">accounting_fixupname=</var><span
          class="emphasis"><i class="EMPHASIS">change accounting
          name infomration</i></span></p>
        </li>
      </ul>

      <p>When a print job is received, the <b class=
      "APPLICATION">lpd</b> server will assign a job number to the
      new job. Historically these have been in the range of 0 to
      999, but the <var class="LITERAL">longnumber</var> option
      allows numbers from 0 to 999,999 to be assigned. The server
      then checks to see that all of the data files for a job have
      been transferred correctly.</p>

      <p>The <var class="LITERAL">fifo</var> flag forces all jobs
      receieved from a particular host to be processed in First In,
      First Out (fifo) order. No new jobs will be processed until
      the incoming job has been released into the spool queue.</p>

      <p>If an incoming control file filter is specified, then the
      incoming job's control file will be passed through the <var
      class="LITERAL">incoming_control_filter</var> filter if it is
      specified. This allows the modification of the control
      file.</p>

      <p>The majority of control file modifications are simple job
      file format changes. The <var class=
      "LITERAL">translate_incoming_format</var> option provides a
      simple way to do this. See the <span class="emphasis"><i
      class="EMPHASIS"><a href=
      "translateformat.htm">translate_format</a></i></span> for
      details.</p>

      <p>The <var class="LITERAL">accounting_namefixup</var> option
      was introduced to allow a simple mapping of host and user
      names to names to be used for accounting purposes. By
      convention, the <var class="LITERAL">R</var> field in the job
      control file specifies the name to be used for accounting
      purposes.</p>

      <div class="INFORMALEXAMPLE">
        <a name="AEN6959"></a>
<pre class="SCREEN">
    accounting_namefixup=list[,list]*
       where list is:   host(,host*)[=user(,user*)]
</pre>
      </div>
      The incoming job is checked to see if the originating host is
      in the list of hosts; the first matching one found is
      used.<br>
      <br>

      <p>Each host list has the format: host,host... where host has
      the same format used for the <var class="LITERAL">oh</var>
      and other host name matching options. You can use '!host' to
      invert matching. For example: <var class=
      "LITERAL">host1,127.*,!somehost</var>.</p>

      <p>When a host match is found, the name to be used for the
      user is determined from the user list; if none is specified
      then no changes are made. Each entry in the user list has the
      format <var class="LITERAL">${option}</var> or <var class=
      "LITERAL">name</var>; the <var class=
      "LITERAL">${option}</var> values are extracted from the
      control file (capital letters) or printcap/configuration
      information (lower case letters/names). The first non-empty
      value list value used. For example, the <var class=
      "LITERAL">${R},${L},${accounting_name},anon</var> will select
      the control file 'R' option value, then the 'L' option value,
      then the printcap/config option 'accounting_name' value, and
      then finally the 'anon' value.</p>

      <p>The control file is then passed through the <var class=
      "LITERAL">router</var> routing filter. This allows the
      incoming job to be redirected to one or more print queues.
      For details about all of the capabilities of the routing
      filter, see <a href="destinations.htm">Dynamic
      Routing</a>.</p>

      <p>Finally, the <b class="APPLICATION">lpd</b> server is
      requested to start a spooling process that will print the
      newly arrived job.</p>
    </div>

    <div class="NAVFOOTER">
      <hr align="LEFT" width="100%">

      <table summary="Footer navigation table" width="100%" border=
      "0" cellpadding="0" cellspacing="0">
        <tr>
          <td width="33%" align="left" valign="top"><a href=
          "submitting.htm" accesskey="P">Prev</a></td>

          <td width="34%" align="center" valign="top"><a href=
          "index.htm" accesskey="H">Home</a></td>

          <td width="33%" align="right" valign="top"><a href=
          "spoolq.htm" accesskey="N">Next</a></td>
        </tr>

        <tr>
          <td width="33%" align="left" valign="top">Submitting Jobs
          and Service Requests</td>

          <td width="34%" align="center" valign="top"><a href=
          "jobsteps.htm" accesskey="U">Up</a></td>

          <td width="33%" align="right" valign="top">Spool Queue
          Processing</td>
        </tr>
      </table>
    </div>
  </body>
</html>

