#include "db_config.h"

#include "db_int.h"
#ifdef HAVE_SYSTEM_INCLUDE_FILES
#include <rpc/rpc.h>
#endif
#include "db_server.h"
#include "dbinc/db_server_int.h"

/* BEGIN __env_create_proc */
void
__env_create_proc(timeout, replyp)
	u_int32_t timeout;
	__env_create_reply *replyp;
/* END __env_create_proc */
{
	int ret;


	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_cdsgroup_begin_proc */
void
__env_cdsgroup_begin_proc(dbenvcl_id, replyp)
	unsigned int dbenvcl_id;
	__env_cdsgroup_begin_reply *replyp;
/* END __env_cdsgroup_begin_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_close_proc */
void
__env_close_proc(dbenvcl_id, flags, replyp)
	unsigned int dbenvcl_id;
	u_int32_t flags;
	__env_close_reply *replyp;
/* END __env_close_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_dbremove_proc */
void
__env_dbremove_proc(dbenvcl_id, txnpcl_id, name,
		subdb, flags, replyp)
	unsigned int dbenvcl_id;
	unsigned int txnpcl_id;
	char *name;
	char *subdb;
	u_int32_t flags;
	__env_dbremove_reply *replyp;
/* END __env_dbremove_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_dbrename_proc */
void
__env_dbrename_proc(dbenvcl_id, txnpcl_id, name,
		subdb, newname, flags, replyp)
	unsigned int dbenvcl_id;
	unsigned int txnpcl_id;
	char *name;
	char *subdb;
	char *newname;
	u_int32_t flags;
	__env_dbrename_reply *replyp;
/* END __env_dbrename_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_get_cachesize_proc */
void
__env_get_cachesize_proc(dbenvcl_id,
		replyp)
	unsigned int dbenvcl_id;
	__env_get_cachesize_reply *replyp;
/* END __env_get_cachesize_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_get_encrypt_flags_proc */
void
__env_get_encrypt_flags_proc(dbenvcl_id, replyp)
	unsigned int dbenvcl_id;
	__env_get_encrypt_flags_reply *replyp;
/* END __env_get_encrypt_flags_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_get_flags_proc */
void
__env_get_flags_proc(dbenvcl_id, replyp)
	unsigned int dbenvcl_id;
	__env_get_flags_reply *replyp;
/* END __env_get_flags_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_get_home_proc */
void
__env_get_home_proc(dbenvcl_id, replyp)
	unsigned int dbenvcl_id;
	__env_get_home_reply *replyp;
/* END __env_get_home_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_get_open_flags_proc */
void
__env_get_open_flags_proc(dbenvcl_id, replyp)
	unsigned int dbenvcl_id;
	__env_get_open_flags_reply *replyp;
/* END __env_get_open_flags_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_open_proc */
void
__env_open_proc(dbenvcl_id, home, flags,
		mode, replyp)
	unsigned int dbenvcl_id;
	char *home;
	u_int32_t flags;
	u_int32_t mode;
	__env_open_reply *replyp;
/* END __env_open_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_remove_proc */
void
__env_remove_proc(dbenvcl_id, home, flags, replyp)
	unsigned int dbenvcl_id;
	char *home;
	u_int32_t flags;
	__env_remove_reply *replyp;
/* END __env_remove_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_set_cachesize_proc */
void
__env_set_cachesize_proc(dbenvcl_id, gbytes, bytes,
		ncache, replyp)
	unsigned int dbenvcl_id;
	u_int32_t gbytes;
	u_int32_t bytes;
	u_int32_t ncache;
	__env_set_cachesize_reply *replyp;
/* END __env_set_cachesize_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_set_encrypt_proc */
void
__env_set_encrypt_proc(dbenvcl_id, passwd, flags, replyp)
	unsigned int dbenvcl_id;
	char *passwd;
	u_int32_t flags;
	__env_set_encrypt_reply *replyp;
/* END __env_set_encrypt_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_set_flags_proc */
void
__env_set_flags_proc(dbenvcl_id, flags, onoff, replyp)
	unsigned int dbenvcl_id;
	u_int32_t flags;
	u_int32_t onoff;
	__env_set_flags_reply *replyp;
/* END __env_set_flags_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_txn_begin_proc */
void
__env_txn_begin_proc(dbenvcl_id, parentcl_id,
		flags, replyp)
	unsigned int dbenvcl_id;
	unsigned int parentcl_id;
	u_int32_t flags;
	__env_txn_begin_reply *replyp;
/* END __env_txn_begin_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;
	DB_TXN * parent;
	ct_entry *parent_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;
	ACTIVATE_CTP(parent_ctp, parentcl_id, CT_TXN);
	parent = (DB_TXN *)parent_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __env_txn_recover_proc */
void
__env_txn_recover_proc(dbenvcl_id, count,
		flags, replyp, freep)
	unsigned int dbenvcl_id;
	u_int32_t count;
	u_int32_t flags;
	__env_txn_recover_reply *replyp;
	int * freep;
/* END __env_txn_recover_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_create_proc */
void
__db_create_proc(dbenvcl_id, flags, replyp)
	unsigned int dbenvcl_id;
	u_int32_t flags;
	__db_create_reply *replyp;
/* END __db_create_proc */
{
	int ret;
	DB_ENV * dbenv;
	ct_entry *dbenv_ctp;

	ACTIVATE_CTP(dbenv_ctp, dbenvcl_id, CT_ENV);
	dbenv = (DB_ENV *)dbenv_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_associate_proc */
void
__db_associate_proc(dbpcl_id, txnpcl_id, sdbpcl_id,
		flags, replyp)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	unsigned int sdbpcl_id;
	u_int32_t flags;
	__db_associate_reply *replyp;
/* END __db_associate_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;
	DB * sdbp;
	ct_entry *sdbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;
	ACTIVATE_CTP(sdbp_ctp, sdbpcl_id, CT_DB);
	sdbp = (DB *)sdbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_close_proc */
void
__db_close_proc(dbpcl_id, flags, replyp)
	unsigned int dbpcl_id;
	u_int32_t flags;
	__db_close_reply *replyp;
/* END __db_close_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_cursor_proc */
void
__db_cursor_proc(dbpcl_id, txnpcl_id,
		flags, replyp)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t flags;
	__db_cursor_reply *replyp;
/* END __db_cursor_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_del_proc */
void
__db_del_proc(dbpcl_id, txnpcl_id, keydlen,
		keydoff, keyulen, keyflags, keydata,
		keysize, flags, replyp)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t keydlen;
	u_int32_t keydoff;
	u_int32_t keyulen;
	u_int32_t keyflags;
	void *keydata;
	u_int32_t keysize;
	u_int32_t flags;
	__db_del_reply *replyp;
/* END __db_del_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_proc */
void
__db_get_proc(dbpcl_id, txnpcl_id, keydlen,
		keydoff, keyulen, keyflags, keydata,
		keysize, datadlen, datadoff, dataulen,
		dataflags, datadata, datasize, flags, replyp, freep)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t keydlen;
	u_int32_t keydoff;
	u_int32_t keyulen;
	u_int32_t keyflags;
	void *keydata;
	u_int32_t keysize;
	u_int32_t datadlen;
	u_int32_t datadoff;
	u_int32_t dataulen;
	u_int32_t dataflags;
	void *datadata;
	u_int32_t datasize;
	u_int32_t flags;
	__db_get_reply *replyp;
	int * freep;
/* END __db_get_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_bt_minkey_proc */
void
__db_get_bt_minkey_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_bt_minkey_reply *replyp;
/* END __db_get_bt_minkey_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_dbname_proc */
void
__db_get_dbname_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_dbname_reply *replyp;
/* END __db_get_dbname_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_encrypt_flags_proc */
void
__db_get_encrypt_flags_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_encrypt_flags_reply *replyp;
/* END __db_get_encrypt_flags_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_flags_proc */
void
__db_get_flags_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_flags_reply *replyp;
/* END __db_get_flags_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_h_ffactor_proc */
void
__db_get_h_ffactor_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_h_ffactor_reply *replyp;
/* END __db_get_h_ffactor_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_h_nelem_proc */
void
__db_get_h_nelem_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_h_nelem_reply *replyp;
/* END __db_get_h_nelem_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_lorder_proc */
void
__db_get_lorder_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_lorder_reply *replyp;
/* END __db_get_lorder_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_open_flags_proc */
void
__db_get_open_flags_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_open_flags_reply *replyp;
/* END __db_get_open_flags_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_pagesize_proc */
void
__db_get_pagesize_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_pagesize_reply *replyp;
/* END __db_get_pagesize_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_priority_proc */
void
__db_get_priority_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_priority_reply *replyp;
/* END __db_get_priority_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_q_extentsize_proc */
void
__db_get_q_extentsize_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_q_extentsize_reply *replyp;
/* END __db_get_q_extentsize_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_re_delim_proc */
void
__db_get_re_delim_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_re_delim_reply *replyp;
/* END __db_get_re_delim_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_re_len_proc */
void
__db_get_re_len_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_re_len_reply *replyp;
/* END __db_get_re_len_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_get_re_pad_proc */
void
__db_get_re_pad_proc(dbpcl_id, replyp)
	unsigned int dbpcl_id;
	__db_get_re_pad_reply *replyp;
/* END __db_get_re_pad_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_join_proc */
void
__db_join_proc(dbpcl_id, curs, curslen,
		flags, replyp)
	unsigned int dbpcl_id;
	u_int32_t * curs;
	u_int32_t curslen;
	u_int32_t flags;
	__db_join_reply *replyp;
/* END __db_join_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_key_range_proc */
void
__db_key_range_proc(dbpcl_id, txnpcl_id, keydlen,
		keydoff, keyulen, keyflags, keydata,
		keysize, flags, replyp)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t keydlen;
	u_int32_t keydoff;
	u_int32_t keyulen;
	u_int32_t keyflags;
	void *keydata;
	u_int32_t keysize;
	u_int32_t flags;
	__db_key_range_reply *replyp;
/* END __db_key_range_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_open_proc */
void
__db_open_proc(dbpcl_id, txnpcl_id, name,
		subdb, type, flags, mode, replyp)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	char *name;
	char *subdb;
	u_int32_t type;
	u_int32_t flags;
	u_int32_t mode;
	__db_open_reply *replyp;
/* END __db_open_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_pget_proc */
void
__db_pget_proc(dbpcl_id, txnpcl_id, skeydlen,
		skeydoff, skeyulen, skeyflags, skeydata,
		skeysize, pkeydlen, pkeydoff, pkeyulen,
		pkeyflags, pkeydata, pkeysize, datadlen,
		datadoff, dataulen, dataflags, datadata,
		datasize, flags, replyp, freep)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t skeydlen;
	u_int32_t skeydoff;
	u_int32_t skeyulen;
	u_int32_t skeyflags;
	void *skeydata;
	u_int32_t skeysize;
	u_int32_t pkeydlen;
	u_int32_t pkeydoff;
	u_int32_t pkeyulen;
	u_int32_t pkeyflags;
	void *pkeydata;
	u_int32_t pkeysize;
	u_int32_t datadlen;
	u_int32_t datadoff;
	u_int32_t dataulen;
	u_int32_t dataflags;
	void *datadata;
	u_int32_t datasize;
	u_int32_t flags;
	__db_pget_reply *replyp;
	int * freep;
/* END __db_pget_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_put_proc */
void
__db_put_proc(dbpcl_id, txnpcl_id, keydlen,
		keydoff, keyulen, keyflags, keydata,
		keysize, datadlen, datadoff, dataulen,
		dataflags, datadata, datasize, flags, replyp, freep)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t keydlen;
	u_int32_t keydoff;
	u_int32_t keyulen;
	u_int32_t keyflags;
	void *keydata;
	u_int32_t keysize;
	u_int32_t datadlen;
	u_int32_t datadoff;
	u_int32_t dataulen;
	u_int32_t dataflags;
	void *datadata;
	u_int32_t datasize;
	u_int32_t flags;
	__db_put_reply *replyp;
	int * freep;
/* END __db_put_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_remove_proc */
void
__db_remove_proc(dbpcl_id, name, subdb,
		flags, replyp)
	unsigned int dbpcl_id;
	char *name;
	char *subdb;
	u_int32_t flags;
	__db_remove_reply *replyp;
/* END __db_remove_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_rename_proc */
void
__db_rename_proc(dbpcl_id, name, subdb,
		newname, flags, replyp)
	unsigned int dbpcl_id;
	char *name;
	char *subdb;
	char *newname;
	u_int32_t flags;
	__db_rename_reply *replyp;
/* END __db_rename_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_bt_minkey_proc */
void
__db_set_bt_minkey_proc(dbpcl_id, minkey, replyp)
	unsigned int dbpcl_id;
	u_int32_t minkey;
	__db_set_bt_minkey_reply *replyp;
/* END __db_set_bt_minkey_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_encrypt_proc */
void
__db_set_encrypt_proc(dbpcl_id, passwd, flags, replyp)
	unsigned int dbpcl_id;
	char *passwd;
	u_int32_t flags;
	__db_set_encrypt_reply *replyp;
/* END __db_set_encrypt_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_flags_proc */
void
__db_set_flags_proc(dbpcl_id, flags, replyp)
	unsigned int dbpcl_id;
	u_int32_t flags;
	__db_set_flags_reply *replyp;
/* END __db_set_flags_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_h_ffactor_proc */
void
__db_set_h_ffactor_proc(dbpcl_id, ffactor, replyp)
	unsigned int dbpcl_id;
	u_int32_t ffactor;
	__db_set_h_ffactor_reply *replyp;
/* END __db_set_h_ffactor_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_h_nelem_proc */
void
__db_set_h_nelem_proc(dbpcl_id, nelem, replyp)
	unsigned int dbpcl_id;
	u_int32_t nelem;
	__db_set_h_nelem_reply *replyp;
/* END __db_set_h_nelem_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_lorder_proc */
void
__db_set_lorder_proc(dbpcl_id, lorder, replyp)
	unsigned int dbpcl_id;
	u_int32_t lorder;
	__db_set_lorder_reply *replyp;
/* END __db_set_lorder_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_pagesize_proc */
void
__db_set_pagesize_proc(dbpcl_id, pagesize, replyp)
	unsigned int dbpcl_id;
	u_int32_t pagesize;
	__db_set_pagesize_reply *replyp;
/* END __db_set_pagesize_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_priority_proc */
void
__db_set_priority_proc(dbpcl_id, priority, replyp)
	unsigned int dbpcl_id;
	u_int32_t priority;
	__db_set_priority_reply *replyp;
/* END __db_set_priority_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_q_extentsize_proc */
void
__db_set_q_extentsize_proc(dbpcl_id, extentsize, replyp)
	unsigned int dbpcl_id;
	u_int32_t extentsize;
	__db_set_q_extentsize_reply *replyp;
/* END __db_set_q_extentsize_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_re_delim_proc */
void
__db_set_re_delim_proc(dbpcl_id, delim, replyp)
	unsigned int dbpcl_id;
	u_int32_t delim;
	__db_set_re_delim_reply *replyp;
/* END __db_set_re_delim_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_re_len_proc */
void
__db_set_re_len_proc(dbpcl_id, len, replyp)
	unsigned int dbpcl_id;
	u_int32_t len;
	__db_set_re_len_reply *replyp;
/* END __db_set_re_len_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_set_re_pad_proc */
void
__db_set_re_pad_proc(dbpcl_id, pad, replyp)
	unsigned int dbpcl_id;
	u_int32_t pad;
	__db_set_re_pad_reply *replyp;
/* END __db_set_re_pad_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_stat_proc */
void
__db_stat_proc(dbpcl_id, txnpcl_id,
		flags, replyp, freep)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t flags;
	__db_stat_reply *replyp;
	int * freep;
/* END __db_stat_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_sync_proc */
void
__db_sync_proc(dbpcl_id, flags, replyp)
	unsigned int dbpcl_id;
	u_int32_t flags;
	__db_sync_reply *replyp;
/* END __db_sync_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __db_truncate_proc */
void
__db_truncate_proc(dbpcl_id, txnpcl_id,
		flags, replyp)
	unsigned int dbpcl_id;
	unsigned int txnpcl_id;
	u_int32_t flags;
	__db_truncate_reply *replyp;
/* END __db_truncate_proc */
{
	int ret;
	DB * dbp;
	ct_entry *dbp_ctp;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(dbp_ctp, dbpcl_id, CT_DB);
	dbp = (DB *)dbp_ctp->ct_anyp;
	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_close_proc */
void
__dbc_close_proc(dbccl_id, replyp)
	unsigned int dbccl_id;
	__dbc_close_reply *replyp;
/* END __dbc_close_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_count_proc */
void
__dbc_count_proc(dbccl_id, flags, replyp)
	unsigned int dbccl_id;
	u_int32_t flags;
	__dbc_count_reply *replyp;
/* END __dbc_count_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_del_proc */
void
__dbc_del_proc(dbccl_id, flags, replyp)
	unsigned int dbccl_id;
	u_int32_t flags;
	__dbc_del_reply *replyp;
/* END __dbc_del_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_dup_proc */
void
__dbc_dup_proc(dbccl_id, flags, replyp)
	unsigned int dbccl_id;
	u_int32_t flags;
	__dbc_dup_reply *replyp;
/* END __dbc_dup_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_get_proc */
void
__dbc_get_proc(dbccl_id, keydlen, keydoff,
		keyulen, keyflags, keydata, keysize,
		datadlen, datadoff, dataulen, dataflags,
		datadata, datasize, flags, replyp, freep)
	unsigned int dbccl_id;
	u_int32_t keydlen;
	u_int32_t keydoff;
	u_int32_t keyulen;
	u_int32_t keyflags;
	void *keydata;
	u_int32_t keysize;
	u_int32_t datadlen;
	u_int32_t datadoff;
	u_int32_t dataulen;
	u_int32_t dataflags;
	void *datadata;
	u_int32_t datasize;
	u_int32_t flags;
	__dbc_get_reply *replyp;
	int * freep;
/* END __dbc_get_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_get_priority_proc */
void
__dbc_get_priority_proc(dbccl_id, replyp)
	unsigned int dbccl_id;
	__dbc_get_priority_reply *replyp;
/* END __dbc_get_priority_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_pget_proc */
void
__dbc_pget_proc(dbccl_id, skeydlen, skeydoff,
		skeyulen, skeyflags, skeydata, skeysize,
		pkeydlen, pkeydoff, pkeyulen, pkeyflags,
		pkeydata, pkeysize, datadlen, datadoff,
		dataulen, dataflags, datadata, datasize,
		flags, replyp, freep)
	unsigned int dbccl_id;
	u_int32_t skeydlen;
	u_int32_t skeydoff;
	u_int32_t skeyulen;
	u_int32_t skeyflags;
	void *skeydata;
	u_int32_t skeysize;
	u_int32_t pkeydlen;
	u_int32_t pkeydoff;
	u_int32_t pkeyulen;
	u_int32_t pkeyflags;
	void *pkeydata;
	u_int32_t pkeysize;
	u_int32_t datadlen;
	u_int32_t datadoff;
	u_int32_t dataulen;
	u_int32_t dataflags;
	void *datadata;
	u_int32_t datasize;
	u_int32_t flags;
	__dbc_pget_reply *replyp;
	int * freep;
/* END __dbc_pget_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_put_proc */
void
__dbc_put_proc(dbccl_id, keydlen, keydoff,
		keyulen, keyflags, keydata, keysize,
		datadlen, datadoff, dataulen, dataflags,
		datadata, datasize, flags, replyp, freep)
	unsigned int dbccl_id;
	u_int32_t keydlen;
	u_int32_t keydoff;
	u_int32_t keyulen;
	u_int32_t keyflags;
	void *keydata;
	u_int32_t keysize;
	u_int32_t datadlen;
	u_int32_t datadoff;
	u_int32_t dataulen;
	u_int32_t dataflags;
	void *datadata;
	u_int32_t datasize;
	u_int32_t flags;
	__dbc_put_reply *replyp;
	int * freep;
/* END __dbc_put_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __dbc_set_priority_proc */
void
__dbc_set_priority_proc(dbccl_id, priority, replyp)
	unsigned int dbccl_id;
	u_int32_t priority;
	__dbc_set_priority_reply *replyp;
/* END __dbc_set_priority_proc */
{
	int ret;
	DBC * dbc;
	ct_entry *dbc_ctp;

	ACTIVATE_CTP(dbc_ctp, dbccl_id, CT_CURSOR);
	dbc = (DBC *)dbc_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __txn_abort_proc */
void
__txn_abort_proc(txnpcl_id, replyp)
	unsigned int txnpcl_id;
	__txn_abort_reply *replyp;
/* END __txn_abort_proc */
{
	int ret;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __txn_commit_proc */
void
__txn_commit_proc(txnpcl_id, flags, replyp)
	unsigned int txnpcl_id;
	u_int32_t flags;
	__txn_commit_reply *replyp;
/* END __txn_commit_proc */
{
	int ret;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __txn_discard_proc */
void
__txn_discard_proc(txnpcl_id, flags, replyp)
	unsigned int txnpcl_id;
	u_int32_t flags;
	__txn_discard_reply *replyp;
/* END __txn_discard_proc */
{
	int ret;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

/* BEGIN __txn_prepare_proc */
void
__txn_prepare_proc(txnpcl_id, gid, replyp)
	unsigned int txnpcl_id;
	u_int8_t *gid;
	__txn_prepare_reply *replyp;
/* END __txn_prepare_proc */
{
	int ret;
	DB_TXN * txnp;
	ct_entry *txnp_ctp;

	ACTIVATE_CTP(txnp_ctp, txnpcl_id, CT_TXN);
	txnp = (DB_TXN *)txnp_ctp->ct_anyp;

	/*
	 * XXX Code goes here
	 */

	replyp->status = ret;
	return;
}

